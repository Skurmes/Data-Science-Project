{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Copy of Ethereum.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Skurmes/Data-Science-Project/blob/Doge/DOGECOIN_TEST\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FdWzzOriHUzY"
      },
      "source": [
        "#Importing the libraries\n",
        "\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import datetime as dt\n",
        "import matplotlib.pyplot as plt\n",
        "from fbprophet import Prophet\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.model_selection import train_test_split"
      ],
      "execution_count": 85,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "resources": {
            "http://localhost:8080/nbextensions/google.colab/files.js": {
              "data": "Ly8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQwovLwovLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgovLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKLy8KLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKLy8KLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQovLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAovLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAovLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KCi8qKgogKiBAZmlsZW92ZXJ2aWV3IEhlbHBlcnMgZm9yIGdvb2dsZS5jb2xhYiBQeXRob24gbW9kdWxlLgogKi8KKGZ1bmN0aW9uKHNjb3BlKSB7CmZ1bmN0aW9uIHNwYW4odGV4dCwgc3R5bGVBdHRyaWJ1dGVzID0ge30pIHsKICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogIGVsZW1lbnQudGV4dENvbnRlbnQgPSB0ZXh0OwogIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHN0eWxlQXR0cmlidXRlcykpIHsKICAgIGVsZW1lbnQuc3R5bGVba2V5XSA9IHN0eWxlQXR0cmlidXRlc1trZXldOwogIH0KICByZXR1cm4gZWxlbWVudDsKfQoKLy8gTWF4IG51bWJlciBvZiBieXRlcyB3aGljaCB3aWxsIGJlIHVwbG9hZGVkIGF0IGEgdGltZS4KY29uc3QgTUFYX1BBWUxPQURfU0laRSA9IDEwMCAqIDEwMjQ7CgpmdW5jdGlvbiBfdXBsb2FkRmlsZXMoaW5wdXRJZCwgb3V0cHV0SWQpIHsKICBjb25zdCBzdGVwcyA9IHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCk7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICAvLyBDYWNoZSBzdGVwcyBvbiB0aGUgb3V0cHV0RWxlbWVudCB0byBtYWtlIGl0IGF2YWlsYWJsZSBmb3IgdGhlIG5leHQgY2FsbAogIC8vIHRvIHVwbG9hZEZpbGVzQ29udGludWUgZnJvbSBQeXRob24uCiAgb3V0cHV0RWxlbWVudC5zdGVwcyA9IHN0ZXBzOwoKICByZXR1cm4gX3VwbG9hZEZpbGVzQ29udGludWUob3V0cHV0SWQpOwp9CgovLyBUaGlzIGlzIHJvdWdobHkgYW4gYXN5bmMgZ2VuZXJhdG9yIChub3Qgc3VwcG9ydGVkIGluIHRoZSBicm93c2VyIHlldCksCi8vIHdoZXJlIHRoZXJlIGFyZSBtdWx0aXBsZSBhc3luY2hyb25vdXMgc3RlcHMgYW5kIHRoZSBQeXRob24gc2lkZSBpcyBnb2luZwovLyB0byBwb2xsIGZvciBjb21wbGV0aW9uIG9mIGVhY2ggc3RlcC4KLy8gVGhpcyB1c2VzIGEgUHJvbWlzZSB0byBibG9jayB0aGUgcHl0aG9uIHNpZGUgb24gY29tcGxldGlvbiBvZiBlYWNoIHN0ZXAsCi8vIHRoZW4gcGFzc2VzIHRoZSByZXN1bHQgb2YgdGhlIHByZXZpb3VzIHN0ZXAgYXMgdGhlIGlucHV0IHRvIHRoZSBuZXh0IHN0ZXAuCmZ1bmN0aW9uIF91cGxvYWRGaWxlc0NvbnRpbnVlKG91dHB1dElkKSB7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICBjb25zdCBzdGVwcyA9IG91dHB1dEVsZW1lbnQuc3RlcHM7CgogIGNvbnN0IG5leHQgPSBzdGVwcy5uZXh0KG91dHB1dEVsZW1lbnQubGFzdFByb21pc2VWYWx1ZSk7CiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXh0LnZhbHVlLnByb21pc2UpLnRoZW4oKHZhbHVlKSA9PiB7CiAgICAvLyBDYWNoZSB0aGUgbGFzdCBwcm9taXNlIHZhbHVlIHRvIG1ha2UgaXQgYXZhaWxhYmxlIHRvIHRoZSBuZXh0CiAgICAvLyBzdGVwIG9mIHRoZSBnZW5lcmF0b3IuCiAgICBvdXRwdXRFbGVtZW50Lmxhc3RQcm9taXNlVmFsdWUgPSB2YWx1ZTsKICAgIHJldHVybiBuZXh0LnZhbHVlLnJlc3BvbnNlOwogIH0pOwp9CgovKioKICogR2VuZXJhdG9yIGZ1bmN0aW9uIHdoaWNoIGlzIGNhbGxlZCBiZXR3ZWVuIGVhY2ggYXN5bmMgc3RlcCBvZiB0aGUgdXBsb2FkCiAqIHByb2Nlc3MuCiAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dElkIEVsZW1lbnQgSUQgb2YgdGhlIGlucHV0IGZpbGUgcGlja2VyIGVsZW1lbnQuCiAqIEBwYXJhbSB7c3RyaW5nfSBvdXRwdXRJZCBFbGVtZW50IElEIG9mIHRoZSBvdXRwdXQgZGlzcGxheS4KICogQHJldHVybiB7IUl0ZXJhYmxlPCFPYmplY3Q+fSBJdGVyYWJsZSBvZiBuZXh0IHN0ZXBzLgogKi8KZnVuY3Rpb24qIHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCkgewogIGNvbnN0IGlucHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlucHV0SWQpOwogIGlucHV0RWxlbWVudC5kaXNhYmxlZCA9IGZhbHNlOwoKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIG91dHB1dEVsZW1lbnQuaW5uZXJIVE1MID0gJyc7CgogIGNvbnN0IHBpY2tlZFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgaW5wdXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChlKSA9PiB7CiAgICAgIHJlc29sdmUoZS50YXJnZXQuZmlsZXMpOwogICAgfSk7CiAgfSk7CgogIGNvbnN0IGNhbmNlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpOwogIGlucHV0RWxlbWVudC5wYXJlbnRFbGVtZW50LmFwcGVuZENoaWxkKGNhbmNlbCk7CiAgY2FuY2VsLnRleHRDb250ZW50ID0gJ0NhbmNlbCB1cGxvYWQnOwogIGNvbnN0IGNhbmNlbFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgY2FuY2VsLm9uY2xpY2sgPSAoKSA9PiB7CiAgICAgIHJlc29sdmUobnVsbCk7CiAgICB9OwogIH0pOwoKICAvLyBXYWl0IGZvciB0aGUgdXNlciB0byBwaWNrIHRoZSBmaWxlcy4KICBjb25zdCBmaWxlcyA9IHlpZWxkIHsKICAgIHByb21pc2U6IFByb21pc2UucmFjZShbcGlja2VkUHJvbWlzZSwgY2FuY2VsUHJvbWlzZV0pLAogICAgcmVzcG9uc2U6IHsKICAgICAgYWN0aW9uOiAnc3RhcnRpbmcnLAogICAgfQogIH07CgogIGNhbmNlbC5yZW1vdmUoKTsKCiAgLy8gRGlzYWJsZSB0aGUgaW5wdXQgZWxlbWVudCBzaW5jZSBmdXJ0aGVyIHBpY2tzIGFyZSBub3QgYWxsb3dlZC4KICBpbnB1dEVsZW1lbnQuZGlzYWJsZWQgPSB0cnVlOwoKICBpZiAoIWZpbGVzKSB7CiAgICByZXR1cm4gewogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbXBsZXRlJywKICAgICAgfQogICAgfTsKICB9CgogIGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcykgewogICAgY29uc3QgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpOwogICAgbGkuYXBwZW5kKHNwYW4oZmlsZS5uYW1lLCB7Zm9udFdlaWdodDogJ2JvbGQnfSkpOwogICAgbGkuYXBwZW5kKHNwYW4oCiAgICAgICAgYCgke2ZpbGUudHlwZSB8fCAnbi9hJ30pIC0gJHtmaWxlLnNpemV9IGJ5dGVzLCBgICsKICAgICAgICBgbGFzdCBtb2RpZmllZDogJHsKICAgICAgICAgICAgZmlsZS5sYXN0TW9kaWZpZWREYXRlID8gZmlsZS5sYXN0TW9kaWZpZWREYXRlLnRvTG9jYWxlRGF0ZVN0cmluZygpIDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ24vYSd9IC0gYCkpOwogICAgY29uc3QgcGVyY2VudCA9IHNwYW4oJzAlIGRvbmUnKTsKICAgIGxpLmFwcGVuZENoaWxkKHBlcmNlbnQpOwoKICAgIG91dHB1dEVsZW1lbnQuYXBwZW5kQ2hpbGQobGkpOwoKICAgIGNvbnN0IGZpbGVEYXRhUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7CiAgICAgIHJlYWRlci5vbmxvYWQgPSAoZSkgPT4gewogICAgICAgIHJlc29sdmUoZS50YXJnZXQucmVzdWx0KTsKICAgICAgfTsKICAgICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGZpbGUpOwogICAgfSk7CiAgICAvLyBXYWl0IGZvciB0aGUgZGF0YSB0byBiZSByZWFkeS4KICAgIGxldCBmaWxlRGF0YSA9IHlpZWxkIHsKICAgICAgcHJvbWlzZTogZmlsZURhdGFQcm9taXNlLAogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbnRpbnVlJywKICAgICAgfQogICAgfTsKCiAgICAvLyBVc2UgYSBjaHVua2VkIHNlbmRpbmcgdG8gYXZvaWQgbWVzc2FnZSBzaXplIGxpbWl0cy4gU2VlIGIvNjIxMTU2NjAuCiAgICBsZXQgcG9zaXRpb24gPSAwOwogICAgZG8gewogICAgICBjb25zdCBsZW5ndGggPSBNYXRoLm1pbihmaWxlRGF0YS5ieXRlTGVuZ3RoIC0gcG9zaXRpb24sIE1BWF9QQVlMT0FEX1NJWkUpOwogICAgICBjb25zdCBjaHVuayA9IG5ldyBVaW50OEFycmF5KGZpbGVEYXRhLCBwb3NpdGlvbiwgbGVuZ3RoKTsKICAgICAgcG9zaXRpb24gKz0gbGVuZ3RoOwoKICAgICAgY29uc3QgYmFzZTY0ID0gYnRvYShTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGNodW5rKSk7CiAgICAgIHlpZWxkIHsKICAgICAgICByZXNwb25zZTogewogICAgICAgICAgYWN0aW9uOiAnYXBwZW5kJywKICAgICAgICAgIGZpbGU6IGZpbGUubmFtZSwKICAgICAgICAgIGRhdGE6IGJhc2U2NCwKICAgICAgICB9LAogICAgICB9OwoKICAgICAgbGV0IHBlcmNlbnREb25lID0gZmlsZURhdGEuYnl0ZUxlbmd0aCA9PT0gMCA/CiAgICAgICAgICAxMDAgOgogICAgICAgICAgTWF0aC5yb3VuZCgocG9zaXRpb24gLyBmaWxlRGF0YS5ieXRlTGVuZ3RoKSAqIDEwMCk7CiAgICAgIHBlcmNlbnQudGV4dENvbnRlbnQgPSBgJHtwZXJjZW50RG9uZX0lIGRvbmVgOwoKICAgIH0gd2hpbGUgKHBvc2l0aW9uIDwgZmlsZURhdGEuYnl0ZUxlbmd0aCk7CiAgfQoKICAvLyBBbGwgZG9uZS4KICB5aWVsZCB7CiAgICByZXNwb25zZTogewogICAgICBhY3Rpb246ICdjb21wbGV0ZScsCiAgICB9CiAgfTsKfQoKc2NvcGUuZ29vZ2xlID0gc2NvcGUuZ29vZ2xlIHx8IHt9OwpzY29wZS5nb29nbGUuY29sYWIgPSBzY29wZS5nb29nbGUuY29sYWIgfHwge307CnNjb3BlLmdvb2dsZS5jb2xhYi5fZmlsZXMgPSB7CiAgX3VwbG9hZEZpbGVzLAogIF91cGxvYWRGaWxlc0NvbnRpbnVlLAp9Owp9KShzZWxmKTsK",
              "ok": true,
              "headers": [
                [
                  "content-type",
                  "application/javascript"
                ]
              ],
              "status": 200,
              "status_text": ""
            }
          },
          "base_uri": "https://localhost:8080/",
          "height": 72
        },
        "id": "0spnon_GHbSI",
        "outputId": "c73d36a9-3534-4e5e-a331-baf04517ed24"
      },
      "source": [
        "#uploading the data\n",
        "\n",
        "from google.colab import files\n",
        "upload = files.upload()"
      ],
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-a2857a86-3703-4cb3-aa90-cfdd2d41b6f5\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-a2857a86-3703-4cb3-aa90-cfdd2d41b6f5\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script src=\"/nbextensions/google.colab/files.js\"></script> "
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "Saving DOGE-USD.csv to DOGE-USD (2).csv\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xggbBei4Hr85"
      },
      "source": [
        "#Storing the data \n",
        "df_DOGE = pd.read_csv('DOGE-USD (2).csv')"
      ],
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 419
        },
        "id": "XIMiIHvrHsTH",
        "outputId": "18d041c1-a1d5-43bb-9b0a-37b4fa554b6b"
      },
      "source": [
        "#Printing the data\n",
        "df_DOGE"
      ],
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Date</th>\n",
              "      <th>Open</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Close</th>\n",
              "      <th>Adj Close</th>\n",
              "      <th>Volume</th>\n",
              "      <th>Prediction</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2020-06-22</td>\n",
              "      <td>0.002447</td>\n",
              "      <td>0.002495</td>\n",
              "      <td>0.002443</td>\n",
              "      <td>0.002474</td>\n",
              "      <td>0.002474</td>\n",
              "      <td>1.735308e+08</td>\n",
              "      <td>0.003090</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2020-06-23</td>\n",
              "      <td>0.002474</td>\n",
              "      <td>0.002492</td>\n",
              "      <td>0.002457</td>\n",
              "      <td>0.002484</td>\n",
              "      <td>0.002484</td>\n",
              "      <td>1.716048e+08</td>\n",
              "      <td>0.004750</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2020-06-24</td>\n",
              "      <td>0.002483</td>\n",
              "      <td>0.002497</td>\n",
              "      <td>0.002389</td>\n",
              "      <td>0.002430</td>\n",
              "      <td>0.002430</td>\n",
              "      <td>1.783807e+08</td>\n",
              "      <td>0.004397</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2020-06-25</td>\n",
              "      <td>0.002430</td>\n",
              "      <td>0.002433</td>\n",
              "      <td>0.002390</td>\n",
              "      <td>0.002417</td>\n",
              "      <td>0.002417</td>\n",
              "      <td>1.600034e+08</td>\n",
              "      <td>0.003515</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2020-06-26</td>\n",
              "      <td>0.002417</td>\n",
              "      <td>0.002427</td>\n",
              "      <td>0.002359</td>\n",
              "      <td>0.002359</td>\n",
              "      <td>0.002359</td>\n",
              "      <td>1.513191e+08</td>\n",
              "      <td>0.003811</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>361</th>\n",
              "      <td>2021-06-18</td>\n",
              "      <td>0.306428</td>\n",
              "      <td>0.307752</td>\n",
              "      <td>0.280481</td>\n",
              "      <td>0.293472</td>\n",
              "      <td>0.293472</td>\n",
              "      <td>1.846214e+09</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>362</th>\n",
              "      <td>2021-06-19</td>\n",
              "      <td>0.293649</td>\n",
              "      <td>0.297803</td>\n",
              "      <td>0.286189</td>\n",
              "      <td>0.287356</td>\n",
              "      <td>0.287356</td>\n",
              "      <td>1.003248e+09</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>363</th>\n",
              "      <td>2021-06-20</td>\n",
              "      <td>0.286394</td>\n",
              "      <td>0.289727</td>\n",
              "      <td>0.256467</td>\n",
              "      <td>0.280900</td>\n",
              "      <td>0.280900</td>\n",
              "      <td>1.963504e+09</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>364</th>\n",
              "      <td>2021-06-21</td>\n",
              "      <td>0.280660</td>\n",
              "      <td>0.280889</td>\n",
              "      <td>0.166491</td>\n",
              "      <td>0.178691</td>\n",
              "      <td>0.178691</td>\n",
              "      <td>5.640232e+09</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>365</th>\n",
              "      <td>2021-06-22</td>\n",
              "      <td>0.173427</td>\n",
              "      <td>0.215209</td>\n",
              "      <td>0.167182</td>\n",
              "      <td>0.168256</td>\n",
              "      <td>0.168256</td>\n",
              "      <td>6.772369e+09</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>363 rows × 8 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "           Date      Open      High  ...  Adj Close        Volume  Prediction\n",
              "0    2020-06-22  0.002447  0.002495  ...   0.002474  1.735308e+08    0.003090\n",
              "1    2020-06-23  0.002474  0.002492  ...   0.002484  1.716048e+08    0.004750\n",
              "2    2020-06-24  0.002483  0.002497  ...   0.002430  1.783807e+08    0.004397\n",
              "3    2020-06-25  0.002430  0.002433  ...   0.002417  1.600034e+08    0.003515\n",
              "4    2020-06-26  0.002417  0.002427  ...   0.002359  1.513191e+08    0.003811\n",
              "..          ...       ...       ...  ...        ...           ...         ...\n",
              "361  2021-06-18  0.306428  0.307752  ...   0.293472  1.846214e+09         NaN\n",
              "362  2021-06-19  0.293649  0.297803  ...   0.287356  1.003248e+09         NaN\n",
              "363  2021-06-20  0.286394  0.289727  ...   0.280900  1.963504e+09         NaN\n",
              "364  2021-06-21  0.280660  0.280889  ...   0.178691  5.640232e+09         NaN\n",
              "365  2021-06-22  0.173427  0.215209  ...   0.168256  6.772369e+09         NaN\n",
              "\n",
              "[363 rows x 8 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 44
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 297
        },
        "id": "RTG2UeNtNFQ-",
        "outputId": "099b56b0-dd9d-418a-97e4-9945138200c6"
      },
      "source": [
        "#labeling\n",
        "df_DOGE.describe()\n"
      ],
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Open</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Close</th>\n",
              "      <th>Adj Close</th>\n",
              "      <th>Volume</th>\n",
              "      <th>Prediction</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>363.000000</td>\n",
              "      <td>363.000000</td>\n",
              "      <td>363.000000</td>\n",
              "      <td>363.000000</td>\n",
              "      <td>363.000000</td>\n",
              "      <td>3.630000e+02</td>\n",
              "      <td>348.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>0.083927</td>\n",
              "      <td>0.092667</td>\n",
              "      <td>0.075237</td>\n",
              "      <td>0.084410</td>\n",
              "      <td>0.084410</td>\n",
              "      <td>3.012473e+09</td>\n",
              "      <td>0.087945</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>0.147021</td>\n",
              "      <td>0.163813</td>\n",
              "      <td>0.129815</td>\n",
              "      <td>0.147267</td>\n",
              "      <td>0.147267</td>\n",
              "      <td>7.195805e+09</td>\n",
              "      <td>0.149404</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0.002307</td>\n",
              "      <td>0.002327</td>\n",
              "      <td>0.002277</td>\n",
              "      <td>0.002309</td>\n",
              "      <td>0.002309</td>\n",
              "      <td>2.275453e+07</td>\n",
              "      <td>0.002517</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>0.002960</td>\n",
              "      <td>0.003091</td>\n",
              "      <td>0.002890</td>\n",
              "      <td>0.002989</td>\n",
              "      <td>0.002989</td>\n",
              "      <td>6.602140e+07</td>\n",
              "      <td>0.003179</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>0.004508</td>\n",
              "      <td>0.004703</td>\n",
              "      <td>0.004278</td>\n",
              "      <td>0.004548</td>\n",
              "      <td>0.004548</td>\n",
              "      <td>1.755203e+08</td>\n",
              "      <td>0.004769</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>0.058790</td>\n",
              "      <td>0.062258</td>\n",
              "      <td>0.056453</td>\n",
              "      <td>0.058994</td>\n",
              "      <td>0.058994</td>\n",
              "      <td>2.468435e+09</td>\n",
              "      <td>0.061519</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>0.687801</td>\n",
              "      <td>0.737567</td>\n",
              "      <td>0.608168</td>\n",
              "      <td>0.684777</td>\n",
              "      <td>0.684777</td>\n",
              "      <td>6.941068e+10</td>\n",
              "      <td>0.684777</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "             Open        High         Low  ...   Adj Close        Volume  Prediction\n",
              "count  363.000000  363.000000  363.000000  ...  363.000000  3.630000e+02  348.000000\n",
              "mean     0.083927    0.092667    0.075237  ...    0.084410  3.012473e+09    0.087945\n",
              "std      0.147021    0.163813    0.129815  ...    0.147267  7.195805e+09    0.149404\n",
              "min      0.002307    0.002327    0.002277  ...    0.002309  2.275453e+07    0.002517\n",
              "25%      0.002960    0.003091    0.002890  ...    0.002989  6.602140e+07    0.003179\n",
              "50%      0.004508    0.004703    0.004278  ...    0.004548  1.755203e+08    0.004769\n",
              "75%      0.058790    0.062258    0.056453  ...    0.058994  2.468435e+09    0.061519\n",
              "max      0.687801    0.737567    0.608168  ...    0.684777  6.941068e+10    0.684777\n",
              "\n",
              "[8 rows x 7 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 45
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LRpQKiQYMCAB",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 419
        },
        "outputId": "4531da9d-b298-425e-c34d-2934e1582889"
      },
      "source": [
        "\n",
        "df_DOGE.dropna(inplace=True)\n",
        "df_DOGE"
      ],
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Date</th>\n",
              "      <th>Open</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Close</th>\n",
              "      <th>Adj Close</th>\n",
              "      <th>Volume</th>\n",
              "      <th>Prediction</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2020-06-22</td>\n",
              "      <td>0.002447</td>\n",
              "      <td>0.002495</td>\n",
              "      <td>0.002443</td>\n",
              "      <td>0.002474</td>\n",
              "      <td>0.002474</td>\n",
              "      <td>1.735308e+08</td>\n",
              "      <td>0.003090</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2020-06-23</td>\n",
              "      <td>0.002474</td>\n",
              "      <td>0.002492</td>\n",
              "      <td>0.002457</td>\n",
              "      <td>0.002484</td>\n",
              "      <td>0.002484</td>\n",
              "      <td>1.716048e+08</td>\n",
              "      <td>0.004750</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2020-06-24</td>\n",
              "      <td>0.002483</td>\n",
              "      <td>0.002497</td>\n",
              "      <td>0.002389</td>\n",
              "      <td>0.002430</td>\n",
              "      <td>0.002430</td>\n",
              "      <td>1.783807e+08</td>\n",
              "      <td>0.004397</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2020-06-25</td>\n",
              "      <td>0.002430</td>\n",
              "      <td>0.002433</td>\n",
              "      <td>0.002390</td>\n",
              "      <td>0.002417</td>\n",
              "      <td>0.002417</td>\n",
              "      <td>1.600034e+08</td>\n",
              "      <td>0.003515</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2020-06-26</td>\n",
              "      <td>0.002417</td>\n",
              "      <td>0.002427</td>\n",
              "      <td>0.002359</td>\n",
              "      <td>0.002359</td>\n",
              "      <td>0.002359</td>\n",
              "      <td>1.513191e+08</td>\n",
              "      <td>0.003811</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>346</th>\n",
              "      <td>2021-06-03</td>\n",
              "      <td>0.423739</td>\n",
              "      <td>0.440763</td>\n",
              "      <td>0.378819</td>\n",
              "      <td>0.399963</td>\n",
              "      <td>0.399963</td>\n",
              "      <td>6.809900e+09</td>\n",
              "      <td>0.293472</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>347</th>\n",
              "      <td>2021-06-04</td>\n",
              "      <td>0.400982</td>\n",
              "      <td>0.400982</td>\n",
              "      <td>0.351442</td>\n",
              "      <td>0.376323</td>\n",
              "      <td>0.376323</td>\n",
              "      <td>5.889983e+09</td>\n",
              "      <td>0.287356</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>348</th>\n",
              "      <td>2021-06-05</td>\n",
              "      <td>0.376752</td>\n",
              "      <td>0.393886</td>\n",
              "      <td>0.360488</td>\n",
              "      <td>0.372177</td>\n",
              "      <td>0.372177</td>\n",
              "      <td>3.464039e+09</td>\n",
              "      <td>0.280900</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>349</th>\n",
              "      <td>2021-06-06</td>\n",
              "      <td>0.371676</td>\n",
              "      <td>0.376798</td>\n",
              "      <td>0.367254</td>\n",
              "      <td>0.371807</td>\n",
              "      <td>0.371807</td>\n",
              "      <td>1.836611e+09</td>\n",
              "      <td>0.178691</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>350</th>\n",
              "      <td>2021-06-07</td>\n",
              "      <td>0.371566</td>\n",
              "      <td>0.379678</td>\n",
              "      <td>0.329806</td>\n",
              "      <td>0.331050</td>\n",
              "      <td>0.331050</td>\n",
              "      <td>3.043975e+09</td>\n",
              "      <td>0.168256</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>348 rows × 8 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "           Date      Open      High  ...  Adj Close        Volume  Prediction\n",
              "0    2020-06-22  0.002447  0.002495  ...   0.002474  1.735308e+08    0.003090\n",
              "1    2020-06-23  0.002474  0.002492  ...   0.002484  1.716048e+08    0.004750\n",
              "2    2020-06-24  0.002483  0.002497  ...   0.002430  1.783807e+08    0.004397\n",
              "3    2020-06-25  0.002430  0.002433  ...   0.002417  1.600034e+08    0.003515\n",
              "4    2020-06-26  0.002417  0.002427  ...   0.002359  1.513191e+08    0.003811\n",
              "..          ...       ...       ...  ...        ...           ...         ...\n",
              "346  2021-06-03  0.423739  0.440763  ...   0.399963  6.809900e+09    0.293472\n",
              "347  2021-06-04  0.400982  0.400982  ...   0.376323  5.889983e+09    0.287356\n",
              "348  2021-06-05  0.376752  0.393886  ...   0.372177  3.464039e+09    0.280900\n",
              "349  2021-06-06  0.371676  0.376798  ...   0.371807  1.836611e+09    0.178691\n",
              "350  2021-06-07  0.371566  0.379678  ...   0.331050  3.043975e+09    0.168256\n",
              "\n",
              "[348 rows x 8 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 46
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 419
        },
        "id": "Eq6ob36X6KYB",
        "outputId": "6574a6c9-f776-45ab-e64f-a05e052bbfc6"
      },
      "source": [
        "#with the Prediction Column\n",
        "projection = 15\n",
        "\n",
        "df_DOGE['Prediction'] = df_DOGE[['Close']].shift(-projection)\n",
        "\n",
        "df_DOGE"
      ],
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Date</th>\n",
              "      <th>Open</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Close</th>\n",
              "      <th>Adj Close</th>\n",
              "      <th>Volume</th>\n",
              "      <th>Prediction</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2020-06-22</td>\n",
              "      <td>0.002447</td>\n",
              "      <td>0.002495</td>\n",
              "      <td>0.002443</td>\n",
              "      <td>0.002474</td>\n",
              "      <td>0.002474</td>\n",
              "      <td>1.735308e+08</td>\n",
              "      <td>0.003090</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2020-06-23</td>\n",
              "      <td>0.002474</td>\n",
              "      <td>0.002492</td>\n",
              "      <td>0.002457</td>\n",
              "      <td>0.002484</td>\n",
              "      <td>0.002484</td>\n",
              "      <td>1.716048e+08</td>\n",
              "      <td>0.004750</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2020-06-24</td>\n",
              "      <td>0.002483</td>\n",
              "      <td>0.002497</td>\n",
              "      <td>0.002389</td>\n",
              "      <td>0.002430</td>\n",
              "      <td>0.002430</td>\n",
              "      <td>1.783807e+08</td>\n",
              "      <td>0.004397</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2020-06-25</td>\n",
              "      <td>0.002430</td>\n",
              "      <td>0.002433</td>\n",
              "      <td>0.002390</td>\n",
              "      <td>0.002417</td>\n",
              "      <td>0.002417</td>\n",
              "      <td>1.600034e+08</td>\n",
              "      <td>0.003515</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2020-06-26</td>\n",
              "      <td>0.002417</td>\n",
              "      <td>0.002427</td>\n",
              "      <td>0.002359</td>\n",
              "      <td>0.002359</td>\n",
              "      <td>0.002359</td>\n",
              "      <td>1.513191e+08</td>\n",
              "      <td>0.003811</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>346</th>\n",
              "      <td>2021-06-03</td>\n",
              "      <td>0.423739</td>\n",
              "      <td>0.440763</td>\n",
              "      <td>0.378819</td>\n",
              "      <td>0.399963</td>\n",
              "      <td>0.399963</td>\n",
              "      <td>6.809900e+09</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>347</th>\n",
              "      <td>2021-06-04</td>\n",
              "      <td>0.400982</td>\n",
              "      <td>0.400982</td>\n",
              "      <td>0.351442</td>\n",
              "      <td>0.376323</td>\n",
              "      <td>0.376323</td>\n",
              "      <td>5.889983e+09</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>348</th>\n",
              "      <td>2021-06-05</td>\n",
              "      <td>0.376752</td>\n",
              "      <td>0.393886</td>\n",
              "      <td>0.360488</td>\n",
              "      <td>0.372177</td>\n",
              "      <td>0.372177</td>\n",
              "      <td>3.464039e+09</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>349</th>\n",
              "      <td>2021-06-06</td>\n",
              "      <td>0.371676</td>\n",
              "      <td>0.376798</td>\n",
              "      <td>0.367254</td>\n",
              "      <td>0.371807</td>\n",
              "      <td>0.371807</td>\n",
              "      <td>1.836611e+09</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>350</th>\n",
              "      <td>2021-06-07</td>\n",
              "      <td>0.371566</td>\n",
              "      <td>0.379678</td>\n",
              "      <td>0.329806</td>\n",
              "      <td>0.331050</td>\n",
              "      <td>0.331050</td>\n",
              "      <td>3.043975e+09</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>348 rows × 8 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "           Date      Open      High  ...  Adj Close        Volume  Prediction\n",
              "0    2020-06-22  0.002447  0.002495  ...   0.002474  1.735308e+08    0.003090\n",
              "1    2020-06-23  0.002474  0.002492  ...   0.002484  1.716048e+08    0.004750\n",
              "2    2020-06-24  0.002483  0.002497  ...   0.002430  1.783807e+08    0.004397\n",
              "3    2020-06-25  0.002430  0.002433  ...   0.002417  1.600034e+08    0.003515\n",
              "4    2020-06-26  0.002417  0.002427  ...   0.002359  1.513191e+08    0.003811\n",
              "..          ...       ...       ...  ...        ...           ...         ...\n",
              "346  2021-06-03  0.423739  0.440763  ...   0.399963  6.809900e+09         NaN\n",
              "347  2021-06-04  0.400982  0.400982  ...   0.376323  5.889983e+09         NaN\n",
              "348  2021-06-05  0.376752  0.393886  ...   0.372177  3.464039e+09         NaN\n",
              "349  2021-06-06  0.371676  0.376798  ...   0.371807  1.836611e+09         NaN\n",
              "350  2021-06-07  0.371566  0.379678  ...   0.331050  3.043975e+09         NaN\n",
              "\n",
              "[348 rows x 8 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 47
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ytkvkqL372wW",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "545a1bbb-3b7f-4fcb-bb33-21dd87bee38c"
      },
      "source": [
        "\n",
        "X = np.array(df_DOGE[['Close']])\n",
        "\n",
        "X = X[:-projection]\n",
        "print(X)"
      ],
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[0.002474]\n",
            " [0.002484]\n",
            " [0.00243 ]\n",
            " [0.002417]\n",
            " [0.002359]\n",
            " [0.002313]\n",
            " [0.002326]\n",
            " [0.002313]\n",
            " [0.00232 ]\n",
            " [0.002354]\n",
            " [0.002361]\n",
            " [0.002316]\n",
            " [0.002309]\n",
            " [0.002309]\n",
            " [0.002616]\n",
            " [0.00309 ]\n",
            " [0.00475 ]\n",
            " [0.004397]\n",
            " [0.003515]\n",
            " [0.003811]\n",
            " [0.00363 ]\n",
            " [0.003178]\n",
            " [0.003294]\n",
            " [0.003085]\n",
            " [0.002995]\n",
            " [0.003061]\n",
            " [0.003473]\n",
            " [0.003382]\n",
            " [0.003239]\n",
            " [0.003305]\n",
            " [0.003285]\n",
            " [0.003295]\n",
            " [0.00322 ]\n",
            " [0.003234]\n",
            " [0.003235]\n",
            " [0.003153]\n",
            " [0.003197]\n",
            " [0.003192]\n",
            " [0.003231]\n",
            " [0.003225]\n",
            " [0.003689]\n",
            " [0.003336]\n",
            " [0.003389]\n",
            " [0.003535]\n",
            " [0.003513]\n",
            " [0.00356 ]\n",
            " [0.003533]\n",
            " [0.00351 ]\n",
            " [0.003463]\n",
            " [0.003499]\n",
            " [0.003394]\n",
            " [0.003484]\n",
            " [0.003517]\n",
            " [0.003561]\n",
            " [0.003539]\n",
            " [0.003524]\n",
            " [0.003591]\n",
            " [0.003514]\n",
            " [0.003424]\n",
            " [0.003459]\n",
            " [0.003393]\n",
            " [0.003442]\n",
            " [0.003414]\n",
            " [0.003418]\n",
            " [0.003305]\n",
            " [0.003303]\n",
            " [0.003203]\n",
            " [0.003268]\n",
            " [0.003282]\n",
            " [0.0033  ]\n",
            " [0.003221]\n",
            " [0.003256]\n",
            " [0.003122]\n",
            " [0.002802]\n",
            " [0.002899]\n",
            " [0.002758]\n",
            " [0.002787]\n",
            " [0.002811]\n",
            " [0.002756]\n",
            " [0.002779]\n",
            " [0.002805]\n",
            " [0.002806]\n",
            " [0.002819]\n",
            " [0.002776]\n",
            " [0.002803]\n",
            " [0.002832]\n",
            " [0.002826]\n",
            " [0.002814]\n",
            " [0.002804]\n",
            " [0.002794]\n",
            " [0.002778]\n",
            " [0.00263 ]\n",
            " [0.002656]\n",
            " [0.002564]\n",
            " [0.002644]\n",
            " [0.002706]\n",
            " [0.002708]\n",
            " [0.002701]\n",
            " [0.002658]\n",
            " [0.002681]\n",
            " [0.002642]\n",
            " [0.002615]\n",
            " [0.002584]\n",
            " [0.002605]\n",
            " [0.002646]\n",
            " [0.002627]\n",
            " [0.00261 ]\n",
            " [0.0026  ]\n",
            " [0.002603]\n",
            " [0.002655]\n",
            " [0.002674]\n",
            " [0.002637]\n",
            " [0.002593]\n",
            " [0.002612]\n",
            " [0.002581]\n",
            " [0.002586]\n",
            " [0.00259 ]\n",
            " [0.002601]\n",
            " [0.00263 ]\n",
            " [0.002655]\n",
            " [0.002647]\n",
            " [0.002646]\n",
            " [0.002653]\n",
            " [0.002679]\n",
            " [0.002677]\n",
            " [0.002595]\n",
            " [0.002581]\n",
            " [0.002598]\n",
            " [0.002576]\n",
            " [0.002582]\n",
            " [0.002517]\n",
            " [0.002528]\n",
            " [0.002533]\n",
            " [0.002617]\n",
            " [0.00276 ]\n",
            " [0.002671]\n",
            " [0.002711]\n",
            " [0.00267 ]\n",
            " [0.002753]\n",
            " [0.002769]\n",
            " [0.002779]\n",
            " [0.002821]\n",
            " [0.002773]\n",
            " [0.002775]\n",
            " [0.002886]\n",
            " [0.002936]\n",
            " [0.002909]\n",
            " [0.002911]\n",
            " [0.002984]\n",
            " [0.003507]\n",
            " [0.003329]\n",
            " [0.003648]\n",
            " [0.004204]\n",
            " [0.003727]\n",
            " [0.00325 ]\n",
            " [0.003275]\n",
            " [0.003405]\n",
            " [0.003448]\n",
            " [0.003551]\n",
            " [0.003335]\n",
            " [0.003374]\n",
            " [0.003428]\n",
            " [0.003298]\n",
            " [0.003397]\n",
            " [0.003388]\n",
            " [0.003342]\n",
            " [0.003179]\n",
            " [0.003158]\n",
            " [0.003105]\n",
            " [0.003079]\n",
            " [0.003163]\n",
            " [0.003256]\n",
            " [0.003231]\n",
            " [0.003206]\n",
            " [0.003416]\n",
            " [0.00373 ]\n",
            " [0.003858]\n",
            " [0.003927]\n",
            " [0.004625]\n",
            " [0.004787]\n",
            " [0.004508]\n",
            " [0.003768]\n",
            " [0.00457 ]\n",
            " [0.004582]\n",
            " [0.004494]\n",
            " [0.004548]\n",
            " [0.004592]\n",
            " [0.004486]\n",
            " [0.004636]\n",
            " [0.004682]\n",
            " [0.005685]\n",
            " [0.010615]\n",
            " [0.009771]\n",
            " [0.009767]\n",
            " [0.00992 ]\n",
            " [0.010465]\n",
            " [0.009742]\n",
            " [0.009846]\n",
            " [0.010194]\n",
            " [0.00986 ]\n",
            " [0.008835]\n",
            " [0.008063]\n",
            " [0.008616]\n",
            " [0.009397]\n",
            " [0.009369]\n",
            " [0.009265]\n",
            " [0.009067]\n",
            " [0.009171]\n",
            " [0.009098]\n",
            " [0.00906 ]\n",
            " [0.008166]\n",
            " [0.008524]\n",
            " [0.008579]\n",
            " [0.008727]\n",
            " [0.008383]\n",
            " [0.008255]\n",
            " [0.007482]\n",
            " [0.012555]\n",
            " [0.047162]\n",
            " [0.028176]\n",
            " [0.037196]\n",
            " [0.034875]\n",
            " [0.03152 ]\n",
            " [0.03712 ]\n",
            " [0.053289]\n",
            " [0.046935]\n",
            " [0.057595]\n",
            " [0.078782]\n",
            " [0.078825]\n",
            " [0.07007 ]\n",
            " [0.072896]\n",
            " [0.069676]\n",
            " [0.070069]\n",
            " [0.06645 ]\n",
            " [0.062537]\n",
            " [0.056591]\n",
            " [0.05352 ]\n",
            " [0.049376]\n",
            " [0.059541]\n",
            " [0.055139]\n",
            " [0.054384]\n",
            " [0.05598 ]\n",
            " [0.053725]\n",
            " [0.047392]\n",
            " [0.056555]\n",
            " [0.050167]\n",
            " [0.05048 ]\n",
            " [0.050083]\n",
            " [0.048052]\n",
            " [0.050599]\n",
            " [0.050262]\n",
            " [0.050592]\n",
            " [0.050048]\n",
            " [0.049609]\n",
            " [0.050984]\n",
            " [0.052122]\n",
            " [0.061949]\n",
            " [0.057998]\n",
            " [0.056004]\n",
            " [0.055918]\n",
            " [0.055349]\n",
            " [0.062432]\n",
            " [0.058592]\n",
            " [0.057088]\n",
            " [0.058607]\n",
            " [0.057653]\n",
            " [0.057383]\n",
            " [0.058328]\n",
            " [0.058961]\n",
            " [0.057234]\n",
            " [0.054962]\n",
            " [0.053556]\n",
            " [0.051702]\n",
            " [0.051448]\n",
            " [0.053952]\n",
            " [0.054377]\n",
            " [0.053698]\n",
            " [0.054052]\n",
            " [0.0539  ]\n",
            " [0.053657]\n",
            " [0.061986]\n",
            " [0.057664]\n",
            " [0.055804]\n",
            " [0.057404]\n",
            " [0.059696]\n",
            " [0.064458]\n",
            " [0.059028]\n",
            " [0.061464]\n",
            " [0.061684]\n",
            " [0.063845]\n",
            " [0.074649]\n",
            " [0.070767]\n",
            " [0.093445]\n",
            " [0.121517]\n",
            " [0.182207]\n",
            " [0.36587 ]\n",
            " [0.284173]\n",
            " [0.320475]\n",
            " [0.407318]\n",
            " [0.3195  ]\n",
            " [0.306925]\n",
            " [0.260967]\n",
            " [0.248509]\n",
            " [0.270212]\n",
            " [0.251111]\n",
            " [0.270674]\n",
            " [0.272188]\n",
            " [0.323682]\n",
            " [0.305169]\n",
            " [0.337561]\n",
            " [0.392987]\n",
            " [0.376046]\n",
            " [0.441707]\n",
            " [0.541334]\n",
            " [0.657633]\n",
            " [0.580804]\n",
            " [0.684777]\n",
            " [0.636439]\n",
            " [0.57007 ]\n",
            " [0.449964]\n",
            " [0.495231]\n",
            " [0.385376]\n",
            " [0.490374]\n",
            " [0.559604]\n",
            " [0.507972]\n",
            " [0.514895]\n",
            " [0.487892]\n",
            " [0.476115]\n",
            " [0.333123]\n",
            " [0.400194]\n",
            " [0.359382]\n",
            " [0.342371]\n",
            " [0.308071]\n",
            " [0.366162]\n",
            " [0.346302]\n",
            " [0.353693]\n",
            " [0.332945]\n",
            " [0.311205]\n",
            " [0.30311 ]\n",
            " [0.302224]\n",
            " [0.32581 ]\n",
            " [0.370077]\n",
            " [0.423374]\n",
            " [0.399963]\n",
            " [0.376323]\n",
            " [0.372177]\n",
            " [0.371807]\n",
            " [0.33105 ]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "T1n0l_Lc8LpH",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2f408fb4-9430-44f3-bdb0-09bf0858fb3c"
      },
      "source": [
        "\n",
        "y = df_DOGE['Prediction'].values\n",
        "y = y[:-projection]\n",
        "      \n",
        "print(y)"
      ],
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[0.00309  0.00475  0.004397 0.003515 0.003811 0.00363  0.003178 0.003294\n",
            " 0.003085 0.002995 0.003061 0.003473 0.003382 0.003239 0.003305 0.003285\n",
            " 0.003295 0.00322  0.003234 0.003235 0.003153 0.003197 0.003192 0.003231\n",
            " 0.003225 0.003689 0.003336 0.003389 0.003535 0.003513 0.00356  0.003533\n",
            " 0.00351  0.003463 0.003499 0.003394 0.003484 0.003517 0.003561 0.003539\n",
            " 0.003524 0.003591 0.003514 0.003424 0.003459 0.003393 0.003442 0.003414\n",
            " 0.003418 0.003305 0.003303 0.003203 0.003268 0.003282 0.0033   0.003221\n",
            " 0.003256 0.003122 0.002802 0.002899 0.002758 0.002787 0.002811 0.002756\n",
            " 0.002779 0.002805 0.002806 0.002819 0.002776 0.002803 0.002832 0.002826\n",
            " 0.002814 0.002804 0.002794 0.002778 0.00263  0.002656 0.002564 0.002644\n",
            " 0.002706 0.002708 0.002701 0.002658 0.002681 0.002642 0.002615 0.002584\n",
            " 0.002605 0.002646 0.002627 0.00261  0.0026   0.002603 0.002655 0.002674\n",
            " 0.002637 0.002593 0.002612 0.002581 0.002586 0.00259  0.002601 0.00263\n",
            " 0.002655 0.002647 0.002646 0.002653 0.002679 0.002677 0.002595 0.002581\n",
            " 0.002598 0.002576 0.002582 0.002517 0.002528 0.002533 0.002617 0.00276\n",
            " 0.002671 0.002711 0.00267  0.002753 0.002769 0.002779 0.002821 0.002773\n",
            " 0.002775 0.002886 0.002936 0.002909 0.002911 0.002984 0.003507 0.003329\n",
            " 0.003648 0.004204 0.003727 0.00325  0.003275 0.003405 0.003448 0.003551\n",
            " 0.003335 0.003374 0.003428 0.003298 0.003397 0.003388 0.003342 0.003179\n",
            " 0.003158 0.003105 0.003079 0.003163 0.003256 0.003231 0.003206 0.003416\n",
            " 0.00373  0.003858 0.003927 0.004625 0.004787 0.004508 0.003768 0.00457\n",
            " 0.004582 0.004494 0.004548 0.004592 0.004486 0.004636 0.004682 0.005685\n",
            " 0.010615 0.009771 0.009767 0.00992  0.010465 0.009742 0.009846 0.010194\n",
            " 0.00986  0.008835 0.008063 0.008616 0.009397 0.009369 0.009265 0.009067\n",
            " 0.009171 0.009098 0.00906  0.008166 0.008524 0.008579 0.008727 0.008383\n",
            " 0.008255 0.007482 0.012555 0.047162 0.028176 0.037196 0.034875 0.03152\n",
            " 0.03712  0.053289 0.046935 0.057595 0.078782 0.078825 0.07007  0.072896\n",
            " 0.069676 0.070069 0.06645  0.062537 0.056591 0.05352  0.049376 0.059541\n",
            " 0.055139 0.054384 0.05598  0.053725 0.047392 0.056555 0.050167 0.05048\n",
            " 0.050083 0.048052 0.050599 0.050262 0.050592 0.050048 0.049609 0.050984\n",
            " 0.052122 0.061949 0.057998 0.056004 0.055918 0.055349 0.062432 0.058592\n",
            " 0.057088 0.058607 0.057653 0.057383 0.058328 0.058961 0.057234 0.054962\n",
            " 0.053556 0.051702 0.051448 0.053952 0.054377 0.053698 0.054052 0.0539\n",
            " 0.053657 0.061986 0.057664 0.055804 0.057404 0.059696 0.064458 0.059028\n",
            " 0.061464 0.061684 0.063845 0.074649 0.070767 0.093445 0.121517 0.182207\n",
            " 0.36587  0.284173 0.320475 0.407318 0.3195   0.306925 0.260967 0.248509\n",
            " 0.270212 0.251111 0.270674 0.272188 0.323682 0.305169 0.337561 0.392987\n",
            " 0.376046 0.441707 0.541334 0.657633 0.580804 0.684777 0.636439 0.57007\n",
            " 0.449964 0.495231 0.385376 0.490374 0.559604 0.507972 0.514895 0.487892\n",
            " 0.476115 0.333123 0.400194 0.359382 0.342371 0.308071 0.366162 0.346302\n",
            " 0.353693 0.332945 0.311205 0.30311  0.302224 0.32581  0.370077 0.423374\n",
            " 0.399963 0.376323 0.372177 0.371807 0.33105 ]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RT3TF6N_9rzE"
      },
      "source": [
        "x_train, x_test, y_train, y_test = train_test_split(X, y, test_size = .15)"
      ],
      "execution_count": 86,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QnnhNH8b8kiG",
        "outputId": "a9ad9336-4b11-4766-875a-852b83e30dce"
      },
      "source": [
        "\n",
        "linReg = LinearRegression()\n",
        "linReg.fit(x_train, y_train)\n"
      ],
      "execution_count": 67,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 67
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "50UkQbVc-AD9",
        "outputId": "6321a5d5-ca20-4df7-cd26-30619eea82ad"
      },
      "source": [
        "\n",
        "linReg_confidence = linReg.score(x_test, y_test)\n",
        "print('Liner Regression Confidence: ', linReg_confidence)\n"
      ],
      "execution_count": 68,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Liner Regression Confidence:  0.6737503885965457\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rCTiLVni-TqI",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "075afa33-07db-41f4-dbb8-72e3836a7405"
      },
      "source": [
        "x_projection = np.array(df_DOGE[['Close']])[-projection:]\n",
        "print(x_projection)"
      ],
      "execution_count": 87,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[0.366162]\n",
            " [0.346302]\n",
            " [0.353693]\n",
            " [0.332945]\n",
            " [0.311205]\n",
            " [0.30311 ]\n",
            " [0.302224]\n",
            " [0.32581 ]\n",
            " [0.370077]\n",
            " [0.423374]\n",
            " [0.399963]\n",
            " [0.376323]\n",
            " [0.372177]\n",
            " [0.371807]\n",
            " [0.33105 ]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZNvj35QE-7Cf",
        "outputId": "fd22a78c-98db-45f5-add5-e0a834489078"
      },
      "source": [
        "#Prediction of Data results within 15% split\n",
        "linReg_prediction = linReg.predict(x_projection)\n",
        "print(linReg_prediction)"
      ],
      "execution_count": 70,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[2582.72886005 2670.44063416 2538.38435324 2424.674946   2442.74833422\n",
            " 2573.99217495 2602.47946888 2673.01870747 2438.09294942 2442.28246557\n",
            " 2306.82671151 2255.41920387 2320.9560139  1975.32023184 1810.74356861]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PPi5dHQy_MNc",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4ca443e2-31e3-4e19-99bd-7a29947b8292"
      },
      "source": [
        "#Data for Crypocurrency Graph\n",
        "\n",
        "end = dt.datetime.now()\n",
        "start = dt.date(end.year - 4, end.month, end.day)\n",
        "\n",
        "tickers = ['BTC-USD', 'ETH-USD', 'DOGE-USD']\n",
        "end"
      ],
      "execution_count": 72,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "datetime.datetime(2021, 7, 7, 17, 39, 42, 981485)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 72
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 414
        },
        "id": "_YD-LgM_8WbY",
        "outputId": "dc709f42-73a3-4ab7-82db-06df0a60a058"
      },
      "source": [
        "\n",
        "df_DOGE = df_DOGE.reset_index()\n",
        "df_DOGE"
      ],
      "execution_count": 90,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>index</th>\n",
              "      <th>Date</th>\n",
              "      <th>Open</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Close</th>\n",
              "      <th>Adj Close</th>\n",
              "      <th>Volume</th>\n",
              "      <th>Prediction</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>2020-06-22</td>\n",
              "      <td>0.002447</td>\n",
              "      <td>0.002495</td>\n",
              "      <td>0.002443</td>\n",
              "      <td>0.002474</td>\n",
              "      <td>0.002474</td>\n",
              "      <td>1.735308e+08</td>\n",
              "      <td>0.003090</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>2020-06-23</td>\n",
              "      <td>0.002474</td>\n",
              "      <td>0.002492</td>\n",
              "      <td>0.002457</td>\n",
              "      <td>0.002484</td>\n",
              "      <td>0.002484</td>\n",
              "      <td>1.716048e+08</td>\n",
              "      <td>0.004750</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>2020-06-24</td>\n",
              "      <td>0.002483</td>\n",
              "      <td>0.002497</td>\n",
              "      <td>0.002389</td>\n",
              "      <td>0.002430</td>\n",
              "      <td>0.002430</td>\n",
              "      <td>1.783807e+08</td>\n",
              "      <td>0.004397</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>2020-06-25</td>\n",
              "      <td>0.002430</td>\n",
              "      <td>0.002433</td>\n",
              "      <td>0.002390</td>\n",
              "      <td>0.002417</td>\n",
              "      <td>0.002417</td>\n",
              "      <td>1.600034e+08</td>\n",
              "      <td>0.003515</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>2020-06-26</td>\n",
              "      <td>0.002417</td>\n",
              "      <td>0.002427</td>\n",
              "      <td>0.002359</td>\n",
              "      <td>0.002359</td>\n",
              "      <td>0.002359</td>\n",
              "      <td>1.513191e+08</td>\n",
              "      <td>0.003811</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>343</th>\n",
              "      <td>346</td>\n",
              "      <td>2021-06-03</td>\n",
              "      <td>0.423739</td>\n",
              "      <td>0.440763</td>\n",
              "      <td>0.378819</td>\n",
              "      <td>0.399963</td>\n",
              "      <td>0.399963</td>\n",
              "      <td>6.809900e+09</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>344</th>\n",
              "      <td>347</td>\n",
              "      <td>2021-06-04</td>\n",
              "      <td>0.400982</td>\n",
              "      <td>0.400982</td>\n",
              "      <td>0.351442</td>\n",
              "      <td>0.376323</td>\n",
              "      <td>0.376323</td>\n",
              "      <td>5.889983e+09</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>345</th>\n",
              "      <td>348</td>\n",
              "      <td>2021-06-05</td>\n",
              "      <td>0.376752</td>\n",
              "      <td>0.393886</td>\n",
              "      <td>0.360488</td>\n",
              "      <td>0.372177</td>\n",
              "      <td>0.372177</td>\n",
              "      <td>3.464039e+09</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>346</th>\n",
              "      <td>349</td>\n",
              "      <td>2021-06-06</td>\n",
              "      <td>0.371676</td>\n",
              "      <td>0.376798</td>\n",
              "      <td>0.367254</td>\n",
              "      <td>0.371807</td>\n",
              "      <td>0.371807</td>\n",
              "      <td>1.836611e+09</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>347</th>\n",
              "      <td>350</td>\n",
              "      <td>2021-06-07</td>\n",
              "      <td>0.371566</td>\n",
              "      <td>0.379678</td>\n",
              "      <td>0.329806</td>\n",
              "      <td>0.331050</td>\n",
              "      <td>0.331050</td>\n",
              "      <td>3.043975e+09</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>348 rows × 9 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "     index        Date      Open  ...  Adj Close        Volume  Prediction\n",
              "0        0  2020-06-22  0.002447  ...   0.002474  1.735308e+08    0.003090\n",
              "1        1  2020-06-23  0.002474  ...   0.002484  1.716048e+08    0.004750\n",
              "2        2  2020-06-24  0.002483  ...   0.002430  1.783807e+08    0.004397\n",
              "3        3  2020-06-25  0.002430  ...   0.002417  1.600034e+08    0.003515\n",
              "4        4  2020-06-26  0.002417  ...   0.002359  1.513191e+08    0.003811\n",
              "..     ...         ...       ...  ...        ...           ...         ...\n",
              "343    346  2021-06-03  0.423739  ...   0.399963  6.809900e+09         NaN\n",
              "344    347  2021-06-04  0.400982  ...   0.376323  5.889983e+09         NaN\n",
              "345    348  2021-06-05  0.376752  ...   0.372177  3.464039e+09         NaN\n",
              "346    349  2021-06-06  0.371676  ...   0.371807  1.836611e+09         NaN\n",
              "347    350  2021-06-07  0.371566  ...   0.331050  3.043975e+09         NaN\n",
              "\n",
              "[348 rows x 9 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 90
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 414
        },
        "id": "hPfVFP93_Ljp",
        "outputId": "2fed8e25-00ce-4b23-d85d-bb29961e8a8f"
      },
      "source": [
        "#for graph\n",
        "df_DOGE[['ds', 'y']] = df_DOGE[['Date', 'Adj Close']]\n",
        "df_DOGE"
      ],
      "execution_count": 91,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>index</th>\n",
              "      <th>Date</th>\n",
              "      <th>Open</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Close</th>\n",
              "      <th>Adj Close</th>\n",
              "      <th>Volume</th>\n",
              "      <th>Prediction</th>\n",
              "      <th>ds</th>\n",
              "      <th>y</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>2020-06-22</td>\n",
              "      <td>0.002447</td>\n",
              "      <td>0.002495</td>\n",
              "      <td>0.002443</td>\n",
              "      <td>0.002474</td>\n",
              "      <td>0.002474</td>\n",
              "      <td>1.735308e+08</td>\n",
              "      <td>0.003090</td>\n",
              "      <td>2020-06-22</td>\n",
              "      <td>0.002474</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>2020-06-23</td>\n",
              "      <td>0.002474</td>\n",
              "      <td>0.002492</td>\n",
              "      <td>0.002457</td>\n",
              "      <td>0.002484</td>\n",
              "      <td>0.002484</td>\n",
              "      <td>1.716048e+08</td>\n",
              "      <td>0.004750</td>\n",
              "      <td>2020-06-23</td>\n",
              "      <td>0.002484</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>2020-06-24</td>\n",
              "      <td>0.002483</td>\n",
              "      <td>0.002497</td>\n",
              "      <td>0.002389</td>\n",
              "      <td>0.002430</td>\n",
              "      <td>0.002430</td>\n",
              "      <td>1.783807e+08</td>\n",
              "      <td>0.004397</td>\n",
              "      <td>2020-06-24</td>\n",
              "      <td>0.002430</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>2020-06-25</td>\n",
              "      <td>0.002430</td>\n",
              "      <td>0.002433</td>\n",
              "      <td>0.002390</td>\n",
              "      <td>0.002417</td>\n",
              "      <td>0.002417</td>\n",
              "      <td>1.600034e+08</td>\n",
              "      <td>0.003515</td>\n",
              "      <td>2020-06-25</td>\n",
              "      <td>0.002417</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>2020-06-26</td>\n",
              "      <td>0.002417</td>\n",
              "      <td>0.002427</td>\n",
              "      <td>0.002359</td>\n",
              "      <td>0.002359</td>\n",
              "      <td>0.002359</td>\n",
              "      <td>1.513191e+08</td>\n",
              "      <td>0.003811</td>\n",
              "      <td>2020-06-26</td>\n",
              "      <td>0.002359</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>343</th>\n",
              "      <td>346</td>\n",
              "      <td>2021-06-03</td>\n",
              "      <td>0.423739</td>\n",
              "      <td>0.440763</td>\n",
              "      <td>0.378819</td>\n",
              "      <td>0.399963</td>\n",
              "      <td>0.399963</td>\n",
              "      <td>6.809900e+09</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2021-06-03</td>\n",
              "      <td>0.399963</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>344</th>\n",
              "      <td>347</td>\n",
              "      <td>2021-06-04</td>\n",
              "      <td>0.400982</td>\n",
              "      <td>0.400982</td>\n",
              "      <td>0.351442</td>\n",
              "      <td>0.376323</td>\n",
              "      <td>0.376323</td>\n",
              "      <td>5.889983e+09</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2021-06-04</td>\n",
              "      <td>0.376323</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>345</th>\n",
              "      <td>348</td>\n",
              "      <td>2021-06-05</td>\n",
              "      <td>0.376752</td>\n",
              "      <td>0.393886</td>\n",
              "      <td>0.360488</td>\n",
              "      <td>0.372177</td>\n",
              "      <td>0.372177</td>\n",
              "      <td>3.464039e+09</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2021-06-05</td>\n",
              "      <td>0.372177</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>346</th>\n",
              "      <td>349</td>\n",
              "      <td>2021-06-06</td>\n",
              "      <td>0.371676</td>\n",
              "      <td>0.376798</td>\n",
              "      <td>0.367254</td>\n",
              "      <td>0.371807</td>\n",
              "      <td>0.371807</td>\n",
              "      <td>1.836611e+09</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2021-06-06</td>\n",
              "      <td>0.371807</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>347</th>\n",
              "      <td>350</td>\n",
              "      <td>2021-06-07</td>\n",
              "      <td>0.371566</td>\n",
              "      <td>0.379678</td>\n",
              "      <td>0.329806</td>\n",
              "      <td>0.331050</td>\n",
              "      <td>0.331050</td>\n",
              "      <td>3.043975e+09</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2021-06-07</td>\n",
              "      <td>0.331050</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>348 rows × 11 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "     index        Date      Open  ...  Prediction          ds         y\n",
              "0        0  2020-06-22  0.002447  ...    0.003090  2020-06-22  0.002474\n",
              "1        1  2020-06-23  0.002474  ...    0.004750  2020-06-23  0.002484\n",
              "2        2  2020-06-24  0.002483  ...    0.004397  2020-06-24  0.002430\n",
              "3        3  2020-06-25  0.002430  ...    0.003515  2020-06-25  0.002417\n",
              "4        4  2020-06-26  0.002417  ...    0.003811  2020-06-26  0.002359\n",
              "..     ...         ...       ...  ...         ...         ...       ...\n",
              "343    346  2021-06-03  0.423739  ...         NaN  2021-06-03  0.399963\n",
              "344    347  2021-06-04  0.400982  ...         NaN  2021-06-04  0.376323\n",
              "345    348  2021-06-05  0.376752  ...         NaN  2021-06-05  0.372177\n",
              "346    349  2021-06-06  0.371676  ...         NaN  2021-06-06  0.371807\n",
              "347    350  2021-06-07  0.371566  ...         NaN  2021-06-07  0.331050\n",
              "\n",
              "[348 rows x 11 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 91
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tuB_Qrgg_flt",
        "outputId": "de7784f2-febe-418a-b8de-434b72e83032"
      },
      "source": [
        "model = Prophet()\n",
        "\n",
        "model.fit(df_DOGE)"
      ],
      "execution_count": 92,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "INFO:fbprophet:Disabling yearly seasonality. Run prophet with yearly_seasonality=True to override this.\n",
            "INFO:fbprophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<fbprophet.forecaster.Prophet at 0x7fe9e4bd0cd0>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 92
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "y9coxQKp_fsr"
      },
      "source": [
        "future = model.make_future_dataframe(60)"
      ],
      "execution_count": 81,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-5LUC_CE_f0p",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 414
        },
        "outputId": "10a48a73-219e-4e98-c43c-6d51dc3a9c17"
      },
      "source": [
        "#Data for Graph pulled from Prediction\n",
        "forecast = model.predict(future)\n",
        "forecast"
      ],
      "execution_count": 93,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ds</th>\n",
              "      <th>trend</th>\n",
              "      <th>yhat_lower</th>\n",
              "      <th>yhat_upper</th>\n",
              "      <th>trend_lower</th>\n",
              "      <th>trend_upper</th>\n",
              "      <th>additive_terms</th>\n",
              "      <th>additive_terms_lower</th>\n",
              "      <th>additive_terms_upper</th>\n",
              "      <th>weekly</th>\n",
              "      <th>weekly_lower</th>\n",
              "      <th>weekly_upper</th>\n",
              "      <th>multiplicative_terms</th>\n",
              "      <th>multiplicative_terms_lower</th>\n",
              "      <th>multiplicative_terms_upper</th>\n",
              "      <th>yhat</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2020-06-22</td>\n",
              "      <td>-0.003091</td>\n",
              "      <td>-0.076165</td>\n",
              "      <td>0.075141</td>\n",
              "      <td>-0.003091</td>\n",
              "      <td>-0.003091</td>\n",
              "      <td>-0.002292</td>\n",
              "      <td>-0.002292</td>\n",
              "      <td>-0.002292</td>\n",
              "      <td>-0.002292</td>\n",
              "      <td>-0.002292</td>\n",
              "      <td>-0.002292</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>-0.005384</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2020-06-23</td>\n",
              "      <td>-0.003034</td>\n",
              "      <td>-0.077935</td>\n",
              "      <td>0.073794</td>\n",
              "      <td>-0.003034</td>\n",
              "      <td>-0.003034</td>\n",
              "      <td>0.000683</td>\n",
              "      <td>0.000683</td>\n",
              "      <td>0.000683</td>\n",
              "      <td>0.000683</td>\n",
              "      <td>0.000683</td>\n",
              "      <td>0.000683</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>-0.002351</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2020-06-24</td>\n",
              "      <td>-0.002976</td>\n",
              "      <td>-0.075890</td>\n",
              "      <td>0.070380</td>\n",
              "      <td>-0.002976</td>\n",
              "      <td>-0.002976</td>\n",
              "      <td>-0.000661</td>\n",
              "      <td>-0.000661</td>\n",
              "      <td>-0.000661</td>\n",
              "      <td>-0.000661</td>\n",
              "      <td>-0.000661</td>\n",
              "      <td>-0.000661</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>-0.003637</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2020-06-25</td>\n",
              "      <td>-0.002919</td>\n",
              "      <td>-0.083511</td>\n",
              "      <td>0.064004</td>\n",
              "      <td>-0.002919</td>\n",
              "      <td>-0.002919</td>\n",
              "      <td>-0.000480</td>\n",
              "      <td>-0.000480</td>\n",
              "      <td>-0.000480</td>\n",
              "      <td>-0.000480</td>\n",
              "      <td>-0.000480</td>\n",
              "      <td>-0.000480</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>-0.003399</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2020-06-26</td>\n",
              "      <td>-0.002861</td>\n",
              "      <td>-0.073549</td>\n",
              "      <td>0.080558</td>\n",
              "      <td>-0.002861</td>\n",
              "      <td>-0.002861</td>\n",
              "      <td>0.004661</td>\n",
              "      <td>0.004661</td>\n",
              "      <td>0.004661</td>\n",
              "      <td>0.004661</td>\n",
              "      <td>0.004661</td>\n",
              "      <td>0.004661</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.001800</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>418</th>\n",
              "      <td>2021-08-17</td>\n",
              "      <td>0.837850</td>\n",
              "      <td>0.758836</td>\n",
              "      <td>0.921946</td>\n",
              "      <td>0.808437</td>\n",
              "      <td>0.866683</td>\n",
              "      <td>0.000683</td>\n",
              "      <td>0.000683</td>\n",
              "      <td>0.000683</td>\n",
              "      <td>0.000683</td>\n",
              "      <td>0.000683</td>\n",
              "      <td>0.000683</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.838533</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>419</th>\n",
              "      <td>2021-08-18</td>\n",
              "      <td>0.842889</td>\n",
              "      <td>0.760560</td>\n",
              "      <td>0.923362</td>\n",
              "      <td>0.812789</td>\n",
              "      <td>0.872380</td>\n",
              "      <td>-0.000661</td>\n",
              "      <td>-0.000661</td>\n",
              "      <td>-0.000661</td>\n",
              "      <td>-0.000661</td>\n",
              "      <td>-0.000661</td>\n",
              "      <td>-0.000661</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.842227</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>420</th>\n",
              "      <td>2021-08-19</td>\n",
              "      <td>0.847927</td>\n",
              "      <td>0.762347</td>\n",
              "      <td>0.924440</td>\n",
              "      <td>0.817158</td>\n",
              "      <td>0.878232</td>\n",
              "      <td>-0.000480</td>\n",
              "      <td>-0.000480</td>\n",
              "      <td>-0.000480</td>\n",
              "      <td>-0.000480</td>\n",
              "      <td>-0.000480</td>\n",
              "      <td>-0.000480</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.847447</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>421</th>\n",
              "      <td>2021-08-20</td>\n",
              "      <td>0.852966</td>\n",
              "      <td>0.773752</td>\n",
              "      <td>0.947383</td>\n",
              "      <td>0.821529</td>\n",
              "      <td>0.884068</td>\n",
              "      <td>0.004661</td>\n",
              "      <td>0.004661</td>\n",
              "      <td>0.004661</td>\n",
              "      <td>0.004661</td>\n",
              "      <td>0.004661</td>\n",
              "      <td>0.004661</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.857627</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>422</th>\n",
              "      <td>2021-08-21</td>\n",
              "      <td>0.858005</td>\n",
              "      <td>0.778593</td>\n",
              "      <td>0.937763</td>\n",
              "      <td>0.825917</td>\n",
              "      <td>0.889927</td>\n",
              "      <td>0.000391</td>\n",
              "      <td>0.000391</td>\n",
              "      <td>0.000391</td>\n",
              "      <td>0.000391</td>\n",
              "      <td>0.000391</td>\n",
              "      <td>0.000391</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.858396</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>423 rows × 16 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "            ds     trend  ...  multiplicative_terms_upper      yhat\n",
              "0   2020-06-22 -0.003091  ...                         0.0 -0.005384\n",
              "1   2020-06-23 -0.003034  ...                         0.0 -0.002351\n",
              "2   2020-06-24 -0.002976  ...                         0.0 -0.003637\n",
              "3   2020-06-25 -0.002919  ...                         0.0 -0.003399\n",
              "4   2020-06-26 -0.002861  ...                         0.0  0.001800\n",
              "..         ...       ...  ...                         ...       ...\n",
              "418 2021-08-17  0.837850  ...                         0.0  0.838533\n",
              "419 2021-08-18  0.842889  ...                         0.0  0.842227\n",
              "420 2021-08-19  0.847927  ...                         0.0  0.847447\n",
              "421 2021-08-20  0.852966  ...                         0.0  0.857627\n",
              "422 2021-08-21  0.858005  ...                         0.0  0.858396\n",
              "\n",
              "[423 rows x 16 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 93
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 458
        },
        "id": "4TIOQBgC_wzN",
        "outputId": "b534d19a-e7a3-4c09-a4b4-f9641a24cc90"
      },
      "source": [
        "model.plot(forecast)\n",
        "plt.show"
      ],
      "execution_count": 94,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<function matplotlib.pyplot.show>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 94
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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ent7pz1///79uOOOOwAAFy5cQFVVVfJnlZWVuHDhwrTfme15g4ODAIDvfOc7WLlyJbZu3Trja85X2czWZrNh7969aGlpQXl5OU6fPo0HHngg3UPMirnIdTb9/f0IBALQdf26fj+XZTPXVIZh4IUXXsCmTZuu6/dz1Y3ke62u5X1YKPlmO8+f/vSn2Lx5c/J1F4ps59rR0YHf/e53WL16Ne644w6cOXPmBkaTO7Kd6759+3DnnXeisrISL7zwAr7xjW/cwGiyZ84K8ujoKO699178+Mc/ht/vn/IzRVGgKMqUx15//XXs378fTz31VFpePx6Po7u7G+vWrcPRo0exdu1aPPLII2k5drZlO1vDMLB3714cO3YMPT09aG1txZ49e9Jy7GzKdq4LVS7l+qUvfQkbN27Ehg0b0n7sbGG+6ZXtPHt6evD73/8eX/nKV9JyvFyR7VwBIBqNwul04q233sIXv/hF7Ny5M23HzpZcyPVHP/oRXnnlFXR3d+Pzn/88Hn744bQdey7NSUE2DAP33nsvduzYgXvuuQcAUFJSgosXLwIALl68iGAwmHz+yZMn8YUvfAF//vOfUVhYCACoqKhAV1dX8jnd3d2oqKjAm2++iRUrVmDFihV4+eWXZ31eYWEh3G538vW3bt2Ko0ePZnzsmZYL2R4/fhwAUFtbC0VR8NnPfhaHDx/O+NgzaS5znU1hYSEGBwcRj8en/P58lgu5Tnr88cfR19eHp59+Op1DzKp05Dubrq6uZL4///nPZ30fJi2EfHMhz2PHjuHs2bOoq6tDdXU1wuEw6urqMjDauZMLuQLWrOfk69999904efJkWsc513Ih176+Ppw4cQJr1qwBAGzbtm3+9oFMr+EwTVPuv/9++epXvzrl8UceeWTKwvHdu3eLiMj58+eltrZWDh06NOX5hmFITU2NvP/++8kF4W+//fa01+vv75fq6moJhUISCoWkurpa+vv7RURk27Zt8tprr4mIyK9+9SvZsmVL2sc7l3Il2wsXLkhpaalcunRJRES+/e1vy8MPP5yJIc+Juc510kxrZbds2TLlJr1nn332hseXLbmU6y9/+UtZu3athMPhdAwtJ6Qr30kftQbxau/DQsg3l/JMNd/XIOdSrl//+tdl//79ImL9d2L16tU3PL5syZVcDcOQwsJCee+990REZN++fXLPPfekY4hzLuMF+eDBgwJAWlpapK2tTdra2uTAgQNy+fJlue2226Surk4+9alPJUvsAw88IIFAIPncVatWJY914MABqa+vlyVLlsj3v//9WV9z//79UltbK7W1tfLcc88lH+/s7JQNGzZIS0uL3HbbbXL+/PnMDXwO5FK2e/fulaamJmlpaZG77rpLLl++nLmBZ1g2cl2/fr0UFRWJ0+mUiooKefXVV0VEpKOjQ9rb26W2tla2bNkikUgks4PPoFzKVdM0WbJkSfLYjz/+eGYHPwfSme/27dultLRUdF2XiooK2bdv34yvOdv7sBDyzaU8U833gpxLuQ4MDMidd94pzc3NcvPNN8vx48czO/gMyqVc//jHP0pzc7O0trbKJz/5Seno6Mjs4DOEXzVNRERERJSC36RHRERERJSCBZmIiIiIKAULMhERERFRChZkIiIiIqIULMhERERERClYkImIFpjHHnsMP/zhD7N9GkRE8xYLMhERERFRChZkIqIF4Ac/+AEaGhqwfv16vPfeewCAZ555BsuWLUNrayu2b9+e5TMkIpo/9GyfABER3ZgjR47gt7/9LY4fP454PI6VK1di1apVePLJJ3Hu3Dk4HA4MDg5m+zSJiOYNziATEc1zBw8exN133w232w2/34/NmzcDAFpbW7Fjxw78+te/hq5zPoSI6FqxIBMRLVAHDhzAl7/8ZRw9ehTt7e2Ix+PZPiUionmBBZmIaJ7buHEj/vSnP2F8fBwjIyP4y1/+AtM00dXVhVtvvRVPPfUUhoaGMDo6mu1TJSKaF3jNjYhonlu5ciW2bduGtrY2BINBtLe3Q1EU3HfffRgaGoKI4KGHHkIgEMj2qRIRzQuKiEi2T4KIiIiIKFdwiQURERERUQoWZCIiIiKiFCzIREREREQpWJCJiIiIiFKwIBMRERERpWBBJiIiIiJKwYJMRERERJTi/wHxfvqAi1LT0gAAAABJRU5ErkJggg==\n",
            "text/plain": [
              "<Figure size 720x432 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 458
        },
        "id": "bYfUzNRI_w3N",
        "outputId": "a82ed2b1-a937-449d-f9c3-cf4c03aead0a"
      },
      "source": [
        "model.plot_components(forecast)\n",
        "plt.show"
      ],
      "execution_count": 84,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<function matplotlib.pyplot.show>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 84
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 648x432 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    }
  ]
}